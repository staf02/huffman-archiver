#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <climits>
#include <iomanip>
#include <cmath>
#include <random>
#include <complex>

#pragma warning (disable : 4996)

using namespace std;

const double Pi = atan2(0, -1);

void FFT1(vector<complex<double>>& a, vector<complex<double>>& b, double angle) {
	int n = a.size();
	b = a;
	vector<complex<double>> b_tmp;
	for (int dist = n / 2; dist >= 1; dist >>= 1) {
		angle /= 2.0;
		complex<double> w = polar((double)1.0, angle);
		b_tmp = b;
		for (int i = 0; i < dist; i++) {
			int ind = i;
			complex<double> w1 = 1;
			for (int j = i; j < n; j += 2 * dist) {
				complex<double> b0 = b_tmp[j], b1 = b_tmp[j + dist], w2 = b1 * w1;
				b[ind] = b0 + w2;
				b[ind + n / 2] = b0 - w2;
				ind += dist;
				w1 *= w;
			}
		}
	}
}

vector<int> fast_mult(vector<int> s1, vector<int> s2) {
	int n1 = s1.size(), n2 = s2.size();
	int n = 1;
	while (n < (n1 + n2))
		n <<= 1;
	vector<complex<double>> c(n, 0), b(n, 0), b1(n, 0);
	for (int i = 0; i < n; i++) {
		int x1 = 0, x2 = 0;
		if (i < n1)
			x1 = s1[i];
		if (i < n2)
			x2 = s2[i];
		c[i] = complex<double>(x1, x2);
	}
	FFT1(c, b, 2 * Pi);
	complex<double> two = 2, I = complex<double>(0, 1);
	complex<double> c0 = b[0];
	complex<double> cn = conj(c0);
	b1[0] = ((c0 + cn) / two) * ((cn - c0) * I / two);
	for (int i = 1; i < n; i++) {
		b1[i] = ((b[i] + conj(b[(n - i) % n])) / two) * ((conj(b[(n - i) % n]) - b[i]) * I / two);
	}
	vector<complex<double>> a(n);
	FFT1(b1, a, -2 * Pi);
	vector<int> res;
	for (int i = 0; i < a.size(); i++)
		res.push_back(round(a[i].real()) / n);
	return res;
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int n, m;
	cin >> n >> m;
	vector<int> v1(n), v2(m);
	for (int& i : v1)
		cin >> i;
	for (int& i : v2)
		cin >> i;
	vector<int> v3 = fast_mult(v1, v2);
	for (int i : v3)
		cout << i << " ";
	return 0;
}